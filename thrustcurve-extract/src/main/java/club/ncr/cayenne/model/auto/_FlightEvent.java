package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.model.FlightLog;

/**
 * Class _FlightEvent was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _FlightEvent extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Date> EVENT_DATE = Property.create("eventDate", Date.class);
    public static final Property<Integer> ID = Property.create("id", Integer.class);
    public static final Property<String> LOCATION = Property.create("location", String.class);
    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> WEATHER_CONDITIONS = Property.create("weatherConditions", String.class);
    public static final Property<List<FlightLog>> LAUNCH_LOGS = Property.create("launchLogs", List.class);

    protected String description;
    protected Date eventDate;
    protected Integer id;
    protected String location;
    protected String title;
    protected String weatherConditions;

    protected Object launchLogs;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEventDate(Date eventDate) {
        beforePropertyWrite("eventDate", this.eventDate, eventDate);
        this.eventDate = eventDate;
    }

    public Date getEventDate() {
        beforePropertyRead("eventDate");
        return this.eventDate;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLocation(String location) {
        beforePropertyWrite("location", this.location, location);
        this.location = location;
    }

    public String getLocation() {
        beforePropertyRead("location");
        return this.location;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setWeatherConditions(String weatherConditions) {
        beforePropertyWrite("weatherConditions", this.weatherConditions, weatherConditions);
        this.weatherConditions = weatherConditions;
    }

    public String getWeatherConditions() {
        beforePropertyRead("weatherConditions");
        return this.weatherConditions;
    }

    public void addToLaunchLogs(FlightLog obj) {
        addToManyTarget("launchLogs", obj, true);
    }

    public void removeFromLaunchLogs(FlightLog obj) {
        removeToManyTarget("launchLogs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<FlightLog> getLaunchLogs() {
        return (List<FlightLog>)readProperty("launchLogs");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "eventDate":
                return this.eventDate;
            case "id":
                return this.id;
            case "location":
                return this.location;
            case "title":
                return this.title;
            case "weatherConditions":
                return this.weatherConditions;
            case "launchLogs":
                return this.launchLogs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "eventDate":
                this.eventDate = (Date)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "location":
                this.location = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "weatherConditions":
                this.weatherConditions = (String)val;
                break;
            case "launchLogs":
                this.launchLogs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.eventDate);
        out.writeObject(this.id);
        out.writeObject(this.location);
        out.writeObject(this.title);
        out.writeObject(this.weatherConditions);
        out.writeObject(this.launchLogs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.eventDate = (Date)in.readObject();
        this.id = (Integer)in.readObject();
        this.location = (String)in.readObject();
        this.title = (String)in.readObject();
        this.weatherConditions = (String)in.readObject();
        this.launchLogs = in.readObject();
    }

}
