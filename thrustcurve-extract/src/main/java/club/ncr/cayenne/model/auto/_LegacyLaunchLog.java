package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _LegacyLaunchLog was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LegacyLaunchLog extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ALTITUDE = Property.create("altitude", Long.class);
    public static final Property<String> CONTESTS = Property.create("contests", String.class);
    public static final Property<Date> CREATED_DATE = Property.create("createdDate", Date.class);
    public static final Property<Integer> EVENT_ID = Property.create("eventId", Integer.class);
    public static final Property<Float> FLIGHT_TIME = Property.create("flightTime", Float.class);
    public static final Property<String> FLYER = Property.create("flyer", String.class);
    public static final Property<Integer> FLYER_ID = Property.create("flyerId", Integer.class);
    public static final Property<Integer> LAUNCH_NO = Property.create("launchNo", Integer.class);
    public static final Property<Integer> LCO_ID = Property.create("lcoId", Integer.class);
    public static final Property<String> LCO_INITIALS = Property.create("lcoInitials", String.class);
    public static final Property<String> MOTOR = Property.create("motor", String.class);
    public static final Property<String> MOTOR_GROUP = Property.create("motorGroup", String.class);
    public static final Property<Byte> MOTOR_GROUP_ID = Property.create("motorGroupId", Byte.class);
    public static final Property<String> MOTOR_MAN = Property.create("motorMan", String.class);
    public static final Property<Integer> NAR_NO = Property.create("narNo", Integer.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);
    public static final Property<Integer> PAD_NO = Property.create("padNo", Integer.class);
    public static final Property<String> POST_FLIGHT = Property.create("postFlight", String.class);
    public static final Property<String> ROCKET = Property.create("rocket", String.class);
    public static final Property<String> RSO_INITIALS = Property.create("rsoInitials", String.class);

    protected Long altitude;
    protected String contests;
    protected Date createdDate;
    protected Integer eventId;
    protected Float flightTime;
    protected String flyer;
    protected Integer flyerId;
    protected Integer launchNo;
    protected Integer lcoId;
    protected String lcoInitials;
    protected String motor;
    protected String motorGroup;
    protected Byte motorGroupId;
    protected String motorMan;
    protected Integer narNo;
    protected String notes;
    protected Integer padNo;
    protected String postFlight;
    protected String rocket;
    protected String rsoInitials;


    public void setAltitude(Long altitude) {
        beforePropertyWrite("altitude", this.altitude, altitude);
        this.altitude = altitude;
    }

    public Long getAltitude() {
        beforePropertyRead("altitude");
        return this.altitude;
    }

    public void setContests(String contests) {
        beforePropertyWrite("contests", this.contests, contests);
        this.contests = contests;
    }

    public String getContests() {
        beforePropertyRead("contests");
        return this.contests;
    }

    public void setCreatedDate(Date createdDate) {
        beforePropertyWrite("createdDate", this.createdDate, createdDate);
        this.createdDate = createdDate;
    }

    public Date getCreatedDate() {
        beforePropertyRead("createdDate");
        return this.createdDate;
    }

    public void setEventId(Integer eventId) {
        beforePropertyWrite("eventId", this.eventId, eventId);
        this.eventId = eventId;
    }

    public Integer getEventId() {
        beforePropertyRead("eventId");
        return this.eventId;
    }

    public void setFlightTime(Float flightTime) {
        beforePropertyWrite("flightTime", this.flightTime, flightTime);
        this.flightTime = flightTime;
    }

    public Float getFlightTime() {
        beforePropertyRead("flightTime");
        return this.flightTime;
    }

    public void setFlyer(String flyer) {
        beforePropertyWrite("flyer", this.flyer, flyer);
        this.flyer = flyer;
    }

    public String getFlyer() {
        beforePropertyRead("flyer");
        return this.flyer;
    }

    public void setFlyerId(Integer flyerId) {
        beforePropertyWrite("flyerId", this.flyerId, flyerId);
        this.flyerId = flyerId;
    }

    public Integer getFlyerId() {
        beforePropertyRead("flyerId");
        return this.flyerId;
    }

    public void setLaunchNo(Integer launchNo) {
        beforePropertyWrite("launchNo", this.launchNo, launchNo);
        this.launchNo = launchNo;
    }

    public Integer getLaunchNo() {
        beforePropertyRead("launchNo");
        return this.launchNo;
    }

    public void setLcoId(Integer lcoId) {
        beforePropertyWrite("lcoId", this.lcoId, lcoId);
        this.lcoId = lcoId;
    }

    public Integer getLcoId() {
        beforePropertyRead("lcoId");
        return this.lcoId;
    }

    public void setLcoInitials(String lcoInitials) {
        beforePropertyWrite("lcoInitials", this.lcoInitials, lcoInitials);
        this.lcoInitials = lcoInitials;
    }

    public String getLcoInitials() {
        beforePropertyRead("lcoInitials");
        return this.lcoInitials;
    }

    public void setMotor(String motor) {
        beforePropertyWrite("motor", this.motor, motor);
        this.motor = motor;
    }

    public String getMotor() {
        beforePropertyRead("motor");
        return this.motor;
    }

    public void setMotorGroup(String motorGroup) {
        beforePropertyWrite("motorGroup", this.motorGroup, motorGroup);
        this.motorGroup = motorGroup;
    }

    public String getMotorGroup() {
        beforePropertyRead("motorGroup");
        return this.motorGroup;
    }

    public void setMotorGroupId(Byte motorGroupId) {
        beforePropertyWrite("motorGroupId", this.motorGroupId, motorGroupId);
        this.motorGroupId = motorGroupId;
    }

    public Byte getMotorGroupId() {
        beforePropertyRead("motorGroupId");
        return this.motorGroupId;
    }

    public void setMotorMan(String motorMan) {
        beforePropertyWrite("motorMan", this.motorMan, motorMan);
        this.motorMan = motorMan;
    }

    public String getMotorMan() {
        beforePropertyRead("motorMan");
        return this.motorMan;
    }

    public void setNarNo(Integer narNo) {
        beforePropertyWrite("narNo", this.narNo, narNo);
        this.narNo = narNo;
    }

    public Integer getNarNo() {
        beforePropertyRead("narNo");
        return this.narNo;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    public void setPadNo(Integer padNo) {
        beforePropertyWrite("padNo", this.padNo, padNo);
        this.padNo = padNo;
    }

    public Integer getPadNo() {
        beforePropertyRead("padNo");
        return this.padNo;
    }

    public void setPostFlight(String postFlight) {
        beforePropertyWrite("postFlight", this.postFlight, postFlight);
        this.postFlight = postFlight;
    }

    public String getPostFlight() {
        beforePropertyRead("postFlight");
        return this.postFlight;
    }

    public void setRocket(String rocket) {
        beforePropertyWrite("rocket", this.rocket, rocket);
        this.rocket = rocket;
    }

    public String getRocket() {
        beforePropertyRead("rocket");
        return this.rocket;
    }

    public void setRsoInitials(String rsoInitials) {
        beforePropertyWrite("rsoInitials", this.rsoInitials, rsoInitials);
        this.rsoInitials = rsoInitials;
    }

    public String getRsoInitials() {
        beforePropertyRead("rsoInitials");
        return this.rsoInitials;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "altitude":
                return this.altitude;
            case "contests":
                return this.contests;
            case "createdDate":
                return this.createdDate;
            case "eventId":
                return this.eventId;
            case "flightTime":
                return this.flightTime;
            case "flyer":
                return this.flyer;
            case "flyerId":
                return this.flyerId;
            case "launchNo":
                return this.launchNo;
            case "lcoId":
                return this.lcoId;
            case "lcoInitials":
                return this.lcoInitials;
            case "motor":
                return this.motor;
            case "motorGroup":
                return this.motorGroup;
            case "motorGroupId":
                return this.motorGroupId;
            case "motorMan":
                return this.motorMan;
            case "narNo":
                return this.narNo;
            case "notes":
                return this.notes;
            case "padNo":
                return this.padNo;
            case "postFlight":
                return this.postFlight;
            case "rocket":
                return this.rocket;
            case "rsoInitials":
                return this.rsoInitials;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "altitude":
                this.altitude = (Long)val;
                break;
            case "contests":
                this.contests = (String)val;
                break;
            case "createdDate":
                this.createdDate = (Date)val;
                break;
            case "eventId":
                this.eventId = (Integer)val;
                break;
            case "flightTime":
                this.flightTime = (Float)val;
                break;
            case "flyer":
                this.flyer = (String)val;
                break;
            case "flyerId":
                this.flyerId = (Integer)val;
                break;
            case "launchNo":
                this.launchNo = (Integer)val;
                break;
            case "lcoId":
                this.lcoId = (Integer)val;
                break;
            case "lcoInitials":
                this.lcoInitials = (String)val;
                break;
            case "motor":
                this.motor = (String)val;
                break;
            case "motorGroup":
                this.motorGroup = (String)val;
                break;
            case "motorGroupId":
                this.motorGroupId = (Byte)val;
                break;
            case "motorMan":
                this.motorMan = (String)val;
                break;
            case "narNo":
                this.narNo = (Integer)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            case "padNo":
                this.padNo = (Integer)val;
                break;
            case "postFlight":
                this.postFlight = (String)val;
                break;
            case "rocket":
                this.rocket = (String)val;
                break;
            case "rsoInitials":
                this.rsoInitials = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.altitude);
        out.writeObject(this.contests);
        out.writeObject(this.createdDate);
        out.writeObject(this.eventId);
        out.writeObject(this.flightTime);
        out.writeObject(this.flyer);
        out.writeObject(this.flyerId);
        out.writeObject(this.launchNo);
        out.writeObject(this.lcoId);
        out.writeObject(this.lcoInitials);
        out.writeObject(this.motor);
        out.writeObject(this.motorGroup);
        out.writeObject(this.motorGroupId);
        out.writeObject(this.motorMan);
        out.writeObject(this.narNo);
        out.writeObject(this.notes);
        out.writeObject(this.padNo);
        out.writeObject(this.postFlight);
        out.writeObject(this.rocket);
        out.writeObject(this.rsoInitials);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.altitude = (Long)in.readObject();
        this.contests = (String)in.readObject();
        this.createdDate = (Date)in.readObject();
        this.eventId = (Integer)in.readObject();
        this.flightTime = (Float)in.readObject();
        this.flyer = (String)in.readObject();
        this.flyerId = (Integer)in.readObject();
        this.launchNo = (Integer)in.readObject();
        this.lcoId = (Integer)in.readObject();
        this.lcoInitials = (String)in.readObject();
        this.motor = (String)in.readObject();
        this.motorGroup = (String)in.readObject();
        this.motorGroupId = (Byte)in.readObject();
        this.motorMan = (String)in.readObject();
        this.narNo = (Integer)in.readObject();
        this.notes = (String)in.readObject();
        this.padNo = (Integer)in.readObject();
        this.postFlight = (String)in.readObject();
        this.rocket = (String)in.readObject();
        this.rsoInitials = (String)in.readObject();
    }

}
