package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.model.Motor;
import club.ncr.cayenne.model.MotorCase;

/**
 * Class _MotorDiameter was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MotorDiameter extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Float> DIAMETER = Property.create("diameter", Float.class);
    public static final Property<List<MotorCase>> MOTOR_CASES = Property.create("motorCases", List.class);
    public static final Property<List<Motor>> MOTORS = Property.create("motors", List.class);

    protected Float diameter;

    protected Object motorCases;
    protected Object motors;

    public void setDiameter(Float diameter) {
        beforePropertyWrite("diameter", this.diameter, diameter);
        this.diameter = diameter;
    }

    public Float getDiameter() {
        beforePropertyRead("diameter");
        return this.diameter;
    }

    public void addToMotorCases(MotorCase obj) {
        addToManyTarget("motorCases", obj, true);
    }

    public void removeFromMotorCases(MotorCase obj) {
        removeToManyTarget("motorCases", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MotorCase> getMotorCases() {
        return (List<MotorCase>)readProperty("motorCases");
    }

    public void addToMotors(Motor obj) {
        addToManyTarget("motors", obj, true);
    }

    public void removeFromMotors(Motor obj) {
        removeToManyTarget("motors", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Motor> getMotors() {
        return (List<Motor>)readProperty("motors");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "diameter":
                return this.diameter;
            case "motorCases":
                return this.motorCases;
            case "motors":
                return this.motors;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "diameter":
                this.diameter = (Float)val;
                break;
            case "motorCases":
                this.motorCases = val;
                break;
            case "motors":
                this.motors = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.diameter);
        out.writeObject(this.motorCases);
        out.writeObject(this.motors);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.diameter = (Float)in.readObject();
        this.motorCases = in.readObject();
        this.motors = in.readObject();
    }

}
