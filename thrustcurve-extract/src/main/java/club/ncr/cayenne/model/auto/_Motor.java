package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.model.FlightLog;
import club.ncr.cayenne.model.MotorCase;
import club.ncr.cayenne.model.MotorCertOrg;
import club.ncr.cayenne.model.MotorData;
import club.ncr.cayenne.model.MotorDiameter;
import club.ncr.cayenne.model.MotorImpulse;
import club.ncr.cayenne.model.MotorMfg;
import club.ncr.cayenne.model.MotorName;
import club.ncr.cayenne.model.MotorPropellant;
import club.ncr.cayenne.model.MotorType;

/**
 * Class _Motor was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Motor extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> BRAND_NAME = Property.create("brandName", String.class);
    public static final Property<Double> BURN_TIME = Property.create("burnTime", Double.class);
    public static final Property<Date> CREATED_DATE = Property.create("createdDate", Date.class);
    public static final Property<String> DESIGNATION = Property.create("designation", String.class);
    public static final Property<String> EXTERNAL_ID = Property.create("externalId", String.class);
    public static final Property<Double> GROSS_WEIGHT = Property.create("grossWeight", Double.class);
    public static final Property<Date> LAST_UPDATED = Property.create("lastUpdated", Date.class);
    public static final Property<Double> LENGTH = Property.create("length", Double.class);
    public static final Property<String> SOURCE = Property.create("source", String.class);
    public static final Property<Double> THRUST_AVG = Property.create("thrustAvg", Double.class);
    public static final Property<Double> THRUST_MAX = Property.create("thrustMax", Double.class);
    public static final Property<Double> TOTAL_IMPULSE_NS = Property.create("totalImpulseNs", Double.class);
    public static final Property<Double> WEIGHT = Property.create("weight", Double.class);
    public static final Property<MotorCase> CASE = Property.create("case", MotorCase.class);
    public static final Property<MotorCertOrg> CERTIFICATION_ORGANIZATION = Property.create("certificationOrganization", MotorCertOrg.class);
    public static final Property<MotorName> COMMON_NAME = Property.create("commonName", MotorName.class);
    public static final Property<List<MotorData>> DATA = Property.create("data", List.class);
    public static final Property<MotorDiameter> DIAMETER = Property.create("diameter", MotorDiameter.class);
    public static final Property<List<FlightLog>> FLIGHTS = Property.create("flights", List.class);
    public static final Property<MotorImpulse> IMPULSE = Property.create("impulse", MotorImpulse.class);
    public static final Property<MotorMfg> MANUFACTURER = Property.create("manufacturer", MotorMfg.class);
    public static final Property<MotorPropellant> PROPELLANT = Property.create("propellant", MotorPropellant.class);
    public static final Property<MotorType> TYPE = Property.create("type", MotorType.class);

    protected String brandName;
    protected Double burnTime;
    protected Date createdDate;
    protected String designation;
    protected String externalId;
    protected Double grossWeight;
    protected Date lastUpdated;
    protected Double length;
    protected String source;
    protected Double thrustAvg;
    protected Double thrustMax;
    protected Double totalImpulseNs;
    protected Double weight;

    protected Object _case;
    protected Object certificationOrganization;
    protected Object commonName;
    protected Object data;
    protected Object diameter;
    protected Object flights;
    protected Object impulse;
    protected Object manufacturer;
    protected Object propellant;
    protected Object type;

    public void setBrandName(String brandName) {
        beforePropertyWrite("brandName", this.brandName, brandName);
        this.brandName = brandName;
    }

    public String getBrandName() {
        beforePropertyRead("brandName");
        return this.brandName;
    }

    public void setBurnTime(double burnTime) {
        beforePropertyWrite("burnTime", this.burnTime, burnTime);
        this.burnTime = burnTime;
    }

    public double getBurnTime() {
        beforePropertyRead("burnTime");
        if(this.burnTime == null) {
            return 0;
        }
        return this.burnTime;
    }

    public void setCreatedDate(Date createdDate) {
        beforePropertyWrite("createdDate", this.createdDate, createdDate);
        this.createdDate = createdDate;
    }

    public Date getCreatedDate() {
        beforePropertyRead("createdDate");
        return this.createdDate;
    }

    public void setDesignation(String designation) {
        beforePropertyWrite("designation", this.designation, designation);
        this.designation = designation;
    }

    public String getDesignation() {
        beforePropertyRead("designation");
        return this.designation;
    }

    public void setExternalId(String externalId) {
        beforePropertyWrite("externalId", this.externalId, externalId);
        this.externalId = externalId;
    }

    public String getExternalId() {
        beforePropertyRead("externalId");
        return this.externalId;
    }

    public void setGrossWeight(double grossWeight) {
        beforePropertyWrite("grossWeight", this.grossWeight, grossWeight);
        this.grossWeight = grossWeight;
    }

    public double getGrossWeight() {
        beforePropertyRead("grossWeight");
        if(this.grossWeight == null) {
            return 0;
        }
        return this.grossWeight;
    }

    public void setLastUpdated(Date lastUpdated) {
        beforePropertyWrite("lastUpdated", this.lastUpdated, lastUpdated);
        this.lastUpdated = lastUpdated;
    }

    public Date getLastUpdated() {
        beforePropertyRead("lastUpdated");
        return this.lastUpdated;
    }

    public void setLength(double length) {
        beforePropertyWrite("length", this.length, length);
        this.length = length;
    }

    public double getLength() {
        beforePropertyRead("length");
        if(this.length == null) {
            return 0;
        }
        return this.length;
    }

    public void setSource(String source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public String getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setThrustAvg(double thrustAvg) {
        beforePropertyWrite("thrustAvg", this.thrustAvg, thrustAvg);
        this.thrustAvg = thrustAvg;
    }

    public double getThrustAvg() {
        beforePropertyRead("thrustAvg");
        if(this.thrustAvg == null) {
            return 0;
        }
        return this.thrustAvg;
    }

    public void setThrustMax(double thrustMax) {
        beforePropertyWrite("thrustMax", this.thrustMax, thrustMax);
        this.thrustMax = thrustMax;
    }

    public double getThrustMax() {
        beforePropertyRead("thrustMax");
        if(this.thrustMax == null) {
            return 0;
        }
        return this.thrustMax;
    }

    public void setTotalImpulseNs(double totalImpulseNs) {
        beforePropertyWrite("totalImpulseNs", this.totalImpulseNs, totalImpulseNs);
        this.totalImpulseNs = totalImpulseNs;
    }

    public double getTotalImpulseNs() {
        beforePropertyRead("totalImpulseNs");
        if(this.totalImpulseNs == null) {
            return 0;
        }
        return this.totalImpulseNs;
    }

    public void setWeight(double weight) {
        beforePropertyWrite("weight", this.weight, weight);
        this.weight = weight;
    }

    public double getWeight() {
        beforePropertyRead("weight");
        if(this.weight == null) {
            return 0;
        }
        return this.weight;
    }

    public void setCase(MotorCase _case) {
        setToOneTarget("case", _case, true);
    }

    public MotorCase getCase() {
        return (MotorCase)readProperty("case");
    }

    public void setCertificationOrganization(MotorCertOrg certificationOrganization) {
        setToOneTarget("certificationOrganization", certificationOrganization, true);
    }

    public MotorCertOrg getCertificationOrganization() {
        return (MotorCertOrg)readProperty("certificationOrganization");
    }

    public void setCommonName(MotorName commonName) {
        setToOneTarget("commonName", commonName, true);
    }

    public MotorName getCommonName() {
        return (MotorName)readProperty("commonName");
    }

    public void addToData(MotorData obj) {
        addToManyTarget("data", obj, true);
    }

    public void removeFromData(MotorData obj) {
        removeToManyTarget("data", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MotorData> getData() {
        return (List<MotorData>)readProperty("data");
    }

    public void setDiameter(MotorDiameter diameter) {
        setToOneTarget("diameter", diameter, true);
    }

    public MotorDiameter getDiameter() {
        return (MotorDiameter)readProperty("diameter");
    }

    public void addToFlights(FlightLog obj) {
        addToManyTarget("flights", obj, true);
    }

    public void removeFromFlights(FlightLog obj) {
        removeToManyTarget("flights", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<FlightLog> getFlights() {
        return (List<FlightLog>)readProperty("flights");
    }

    public void setImpulse(MotorImpulse impulse) {
        setToOneTarget("impulse", impulse, true);
    }

    public MotorImpulse getImpulse() {
        return (MotorImpulse)readProperty("impulse");
    }

    public void setManufacturer(MotorMfg manufacturer) {
        setToOneTarget("manufacturer", manufacturer, true);
    }

    public MotorMfg getManufacturer() {
        return (MotorMfg)readProperty("manufacturer");
    }

    public void setPropellant(MotorPropellant propellant) {
        setToOneTarget("propellant", propellant, true);
    }

    public MotorPropellant getPropellant() {
        return (MotorPropellant)readProperty("propellant");
    }

    public void setType(MotorType type) {
        setToOneTarget("type", type, true);
    }

    public MotorType getType() {
        return (MotorType)readProperty("type");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "brandName":
                return this.brandName;
            case "burnTime":
                return this.burnTime;
            case "createdDate":
                return this.createdDate;
            case "designation":
                return this.designation;
            case "externalId":
                return this.externalId;
            case "grossWeight":
                return this.grossWeight;
            case "lastUpdated":
                return this.lastUpdated;
            case "length":
                return this.length;
            case "source":
                return this.source;
            case "thrustAvg":
                return this.thrustAvg;
            case "thrustMax":
                return this.thrustMax;
            case "totalImpulseNs":
                return this.totalImpulseNs;
            case "weight":
                return this.weight;
            case "case":
                return this._case;
            case "certificationOrganization":
                return this.certificationOrganization;
            case "commonName":
                return this.commonName;
            case "data":
                return this.data;
            case "diameter":
                return this.diameter;
            case "flights":
                return this.flights;
            case "impulse":
                return this.impulse;
            case "manufacturer":
                return this.manufacturer;
            case "propellant":
                return this.propellant;
            case "type":
                return this.type;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "brandName":
                this.brandName = (String)val;
                break;
            case "burnTime":
                this.burnTime = (Double)val;
                break;
            case "createdDate":
                this.createdDate = (Date)val;
                break;
            case "designation":
                this.designation = (String)val;
                break;
            case "externalId":
                this.externalId = (String)val;
                break;
            case "grossWeight":
                this.grossWeight = (Double)val;
                break;
            case "lastUpdated":
                this.lastUpdated = (Date)val;
                break;
            case "length":
                this.length = (Double)val;
                break;
            case "source":
                this.source = (String)val;
                break;
            case "thrustAvg":
                this.thrustAvg = (Double)val;
                break;
            case "thrustMax":
                this.thrustMax = (Double)val;
                break;
            case "totalImpulseNs":
                this.totalImpulseNs = (Double)val;
                break;
            case "weight":
                this.weight = (Double)val;
                break;
            case "case":
                this._case = val;
                break;
            case "certificationOrganization":
                this.certificationOrganization = val;
                break;
            case "commonName":
                this.commonName = val;
                break;
            case "data":
                this.data = val;
                break;
            case "diameter":
                this.diameter = val;
                break;
            case "flights":
                this.flights = val;
                break;
            case "impulse":
                this.impulse = val;
                break;
            case "manufacturer":
                this.manufacturer = val;
                break;
            case "propellant":
                this.propellant = val;
                break;
            case "type":
                this.type = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.brandName);
        out.writeObject(this.burnTime);
        out.writeObject(this.createdDate);
        out.writeObject(this.designation);
        out.writeObject(this.externalId);
        out.writeObject(this.grossWeight);
        out.writeObject(this.lastUpdated);
        out.writeObject(this.length);
        out.writeObject(this.source);
        out.writeObject(this.thrustAvg);
        out.writeObject(this.thrustMax);
        out.writeObject(this.totalImpulseNs);
        out.writeObject(this.weight);
        out.writeObject(this._case);
        out.writeObject(this.certificationOrganization);
        out.writeObject(this.commonName);
        out.writeObject(this.data);
        out.writeObject(this.diameter);
        out.writeObject(this.flights);
        out.writeObject(this.impulse);
        out.writeObject(this.manufacturer);
        out.writeObject(this.propellant);
        out.writeObject(this.type);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.brandName = (String)in.readObject();
        this.burnTime = (Double)in.readObject();
        this.createdDate = (Date)in.readObject();
        this.designation = (String)in.readObject();
        this.externalId = (String)in.readObject();
        this.grossWeight = (Double)in.readObject();
        this.lastUpdated = (Date)in.readObject();
        this.length = (Double)in.readObject();
        this.source = (String)in.readObject();
        this.thrustAvg = (Double)in.readObject();
        this.thrustMax = (Double)in.readObject();
        this.totalImpulseNs = (Double)in.readObject();
        this.weight = (Double)in.readObject();
        this._case = in.readObject();
        this.certificationOrganization = in.readObject();
        this.commonName = in.readObject();
        this.data = in.readObject();
        this.diameter = in.readObject();
        this.flights = in.readObject();
        this.impulse = in.readObject();
        this.manufacturer = in.readObject();
        this.propellant = in.readObject();
        this.type = in.readObject();
    }

}
