package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _LegacyFlyerRecord was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LegacyFlyerRecord extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> ADDRESS1 = Property.create("address1", String.class);
    public static final Property<String> ADDRESS2 = Property.create("address2", String.class);
    public static final Property<String> ADDRESS_CITY = Property.create("addressCity", String.class);
    public static final Property<String> ADDRESS_STATE = Property.create("addressState", String.class);
    public static final Property<String> ADDRESS_ZIP = Property.create("addressZip", String.class);
    public static final Property<String> AFFILIATION = Property.create("affiliation", String.class);
    public static final Property<Byte> AGE = Property.create("age", Byte.class);
    public static final Property<Byte> CERT_LEVEL = Property.create("certLevel", Byte.class);
    public static final Property<Date> CREATED_DATE = Property.create("createdDate", Date.class);
    public static final Property<Date> DUES_PAID = Property.create("duesPaid", Date.class);
    public static final Property<String> EMAIL_ADDRESS = Property.create("emailAddress", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> HOME_PHONE = Property.create("homePhone", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> LCO_INITIALS = Property.create("lcoInitials", String.class);
    public static final Property<Byte> MEMBER_TYPE = Property.create("memberType", Byte.class);
    public static final Property<String> MIDDLE_INITIAL = Property.create("middleInitial", String.class);
    public static final Property<String> MOBILE_PHONE = Property.create("mobilePhone", String.class);
    public static final Property<String> NAR_NUMBER = Property.create("narNumber", String.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);
    public static final Property<Date> PAID_THRU = Property.create("paidThru", Date.class);
    public static final Property<String> POST_EMAIL = Property.create("postEmail", String.class);
    public static final Property<String> TRIPOLI_NUMBER = Property.create("tripoliNumber", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<String> WORK_PHONE = Property.create("workPhone", String.class);

    protected String address1;
    protected String address2;
    protected String addressCity;
    protected String addressState;
    protected String addressZip;
    protected String affiliation;
    protected Byte age;
    protected Byte certLevel;
    protected Date createdDate;
    protected Date duesPaid;
    protected String emailAddress;
    protected String firstName;
    protected String homePhone;
    protected String lastName;
    protected String lcoInitials;
    protected Byte memberType;
    protected String middleInitial;
    protected String mobilePhone;
    protected String narNumber;
    protected String notes;
    protected Date paidThru;
    protected String postEmail;
    protected String tripoliNumber;
    protected String username;
    protected String workPhone;


    public void setAddress1(String address1) {
        beforePropertyWrite("address1", this.address1, address1);
        this.address1 = address1;
    }

    public String getAddress1() {
        beforePropertyRead("address1");
        return this.address1;
    }

    public void setAddress2(String address2) {
        beforePropertyWrite("address2", this.address2, address2);
        this.address2 = address2;
    }

    public String getAddress2() {
        beforePropertyRead("address2");
        return this.address2;
    }

    public void setAddressCity(String addressCity) {
        beforePropertyWrite("addressCity", this.addressCity, addressCity);
        this.addressCity = addressCity;
    }

    public String getAddressCity() {
        beforePropertyRead("addressCity");
        return this.addressCity;
    }

    public void setAddressState(String addressState) {
        beforePropertyWrite("addressState", this.addressState, addressState);
        this.addressState = addressState;
    }

    public String getAddressState() {
        beforePropertyRead("addressState");
        return this.addressState;
    }

    public void setAddressZip(String addressZip) {
        beforePropertyWrite("addressZip", this.addressZip, addressZip);
        this.addressZip = addressZip;
    }

    public String getAddressZip() {
        beforePropertyRead("addressZip");
        return this.addressZip;
    }

    public void setAffiliation(String affiliation) {
        beforePropertyWrite("affiliation", this.affiliation, affiliation);
        this.affiliation = affiliation;
    }

    public String getAffiliation() {
        beforePropertyRead("affiliation");
        return this.affiliation;
    }

    public void setAge(Byte age) {
        beforePropertyWrite("age", this.age, age);
        this.age = age;
    }

    public Byte getAge() {
        beforePropertyRead("age");
        return this.age;
    }

    public void setCertLevel(Byte certLevel) {
        beforePropertyWrite("certLevel", this.certLevel, certLevel);
        this.certLevel = certLevel;
    }

    public Byte getCertLevel() {
        beforePropertyRead("certLevel");
        return this.certLevel;
    }

    public void setCreatedDate(Date createdDate) {
        beforePropertyWrite("createdDate", this.createdDate, createdDate);
        this.createdDate = createdDate;
    }

    public Date getCreatedDate() {
        beforePropertyRead("createdDate");
        return this.createdDate;
    }

    public void setDuesPaid(Date duesPaid) {
        beforePropertyWrite("duesPaid", this.duesPaid, duesPaid);
        this.duesPaid = duesPaid;
    }

    public Date getDuesPaid() {
        beforePropertyRead("duesPaid");
        return this.duesPaid;
    }

    public void setEmailAddress(String emailAddress) {
        beforePropertyWrite("emailAddress", this.emailAddress, emailAddress);
        this.emailAddress = emailAddress;
    }

    public String getEmailAddress() {
        beforePropertyRead("emailAddress");
        return this.emailAddress;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setHomePhone(String homePhone) {
        beforePropertyWrite("homePhone", this.homePhone, homePhone);
        this.homePhone = homePhone;
    }

    public String getHomePhone() {
        beforePropertyRead("homePhone");
        return this.homePhone;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setLcoInitials(String lcoInitials) {
        beforePropertyWrite("lcoInitials", this.lcoInitials, lcoInitials);
        this.lcoInitials = lcoInitials;
    }

    public String getLcoInitials() {
        beforePropertyRead("lcoInitials");
        return this.lcoInitials;
    }

    public void setMemberType(Byte memberType) {
        beforePropertyWrite("memberType", this.memberType, memberType);
        this.memberType = memberType;
    }

    public Byte getMemberType() {
        beforePropertyRead("memberType");
        return this.memberType;
    }

    public void setMiddleInitial(String middleInitial) {
        beforePropertyWrite("middleInitial", this.middleInitial, middleInitial);
        this.middleInitial = middleInitial;
    }

    public String getMiddleInitial() {
        beforePropertyRead("middleInitial");
        return this.middleInitial;
    }

    public void setMobilePhone(String mobilePhone) {
        beforePropertyWrite("mobilePhone", this.mobilePhone, mobilePhone);
        this.mobilePhone = mobilePhone;
    }

    public String getMobilePhone() {
        beforePropertyRead("mobilePhone");
        return this.mobilePhone;
    }

    public void setNarNumber(String narNumber) {
        beforePropertyWrite("narNumber", this.narNumber, narNumber);
        this.narNumber = narNumber;
    }

    public String getNarNumber() {
        beforePropertyRead("narNumber");
        return this.narNumber;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    public void setPaidThru(Date paidThru) {
        beforePropertyWrite("paidThru", this.paidThru, paidThru);
        this.paidThru = paidThru;
    }

    public Date getPaidThru() {
        beforePropertyRead("paidThru");
        return this.paidThru;
    }

    public void setPostEmail(String postEmail) {
        beforePropertyWrite("postEmail", this.postEmail, postEmail);
        this.postEmail = postEmail;
    }

    public String getPostEmail() {
        beforePropertyRead("postEmail");
        return this.postEmail;
    }

    public void setTripoliNumber(String tripoliNumber) {
        beforePropertyWrite("tripoliNumber", this.tripoliNumber, tripoliNumber);
        this.tripoliNumber = tripoliNumber;
    }

    public String getTripoliNumber() {
        beforePropertyRead("tripoliNumber");
        return this.tripoliNumber;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void setWorkPhone(String workPhone) {
        beforePropertyWrite("workPhone", this.workPhone, workPhone);
        this.workPhone = workPhone;
    }

    public String getWorkPhone() {
        beforePropertyRead("workPhone");
        return this.workPhone;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "address1":
                return this.address1;
            case "address2":
                return this.address2;
            case "addressCity":
                return this.addressCity;
            case "addressState":
                return this.addressState;
            case "addressZip":
                return this.addressZip;
            case "affiliation":
                return this.affiliation;
            case "age":
                return this.age;
            case "certLevel":
                return this.certLevel;
            case "createdDate":
                return this.createdDate;
            case "duesPaid":
                return this.duesPaid;
            case "emailAddress":
                return this.emailAddress;
            case "firstName":
                return this.firstName;
            case "homePhone":
                return this.homePhone;
            case "lastName":
                return this.lastName;
            case "lcoInitials":
                return this.lcoInitials;
            case "memberType":
                return this.memberType;
            case "middleInitial":
                return this.middleInitial;
            case "mobilePhone":
                return this.mobilePhone;
            case "narNumber":
                return this.narNumber;
            case "notes":
                return this.notes;
            case "paidThru":
                return this.paidThru;
            case "postEmail":
                return this.postEmail;
            case "tripoliNumber":
                return this.tripoliNumber;
            case "username":
                return this.username;
            case "workPhone":
                return this.workPhone;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "address1":
                this.address1 = (String)val;
                break;
            case "address2":
                this.address2 = (String)val;
                break;
            case "addressCity":
                this.addressCity = (String)val;
                break;
            case "addressState":
                this.addressState = (String)val;
                break;
            case "addressZip":
                this.addressZip = (String)val;
                break;
            case "affiliation":
                this.affiliation = (String)val;
                break;
            case "age":
                this.age = (Byte)val;
                break;
            case "certLevel":
                this.certLevel = (Byte)val;
                break;
            case "createdDate":
                this.createdDate = (Date)val;
                break;
            case "duesPaid":
                this.duesPaid = (Date)val;
                break;
            case "emailAddress":
                this.emailAddress = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "homePhone":
                this.homePhone = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "lcoInitials":
                this.lcoInitials = (String)val;
                break;
            case "memberType":
                this.memberType = (Byte)val;
                break;
            case "middleInitial":
                this.middleInitial = (String)val;
                break;
            case "mobilePhone":
                this.mobilePhone = (String)val;
                break;
            case "narNumber":
                this.narNumber = (String)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            case "paidThru":
                this.paidThru = (Date)val;
                break;
            case "postEmail":
                this.postEmail = (String)val;
                break;
            case "tripoliNumber":
                this.tripoliNumber = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "workPhone":
                this.workPhone = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.address1);
        out.writeObject(this.address2);
        out.writeObject(this.addressCity);
        out.writeObject(this.addressState);
        out.writeObject(this.addressZip);
        out.writeObject(this.affiliation);
        out.writeObject(this.age);
        out.writeObject(this.certLevel);
        out.writeObject(this.createdDate);
        out.writeObject(this.duesPaid);
        out.writeObject(this.emailAddress);
        out.writeObject(this.firstName);
        out.writeObject(this.homePhone);
        out.writeObject(this.lastName);
        out.writeObject(this.lcoInitials);
        out.writeObject(this.memberType);
        out.writeObject(this.middleInitial);
        out.writeObject(this.mobilePhone);
        out.writeObject(this.narNumber);
        out.writeObject(this.notes);
        out.writeObject(this.paidThru);
        out.writeObject(this.postEmail);
        out.writeObject(this.tripoliNumber);
        out.writeObject(this.username);
        out.writeObject(this.workPhone);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.address1 = (String)in.readObject();
        this.address2 = (String)in.readObject();
        this.addressCity = (String)in.readObject();
        this.addressState = (String)in.readObject();
        this.addressZip = (String)in.readObject();
        this.affiliation = (String)in.readObject();
        this.age = (Byte)in.readObject();
        this.certLevel = (Byte)in.readObject();
        this.createdDate = (Date)in.readObject();
        this.duesPaid = (Date)in.readObject();
        this.emailAddress = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.homePhone = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.lcoInitials = (String)in.readObject();
        this.memberType = (Byte)in.readObject();
        this.middleInitial = (String)in.readObject();
        this.mobilePhone = (String)in.readObject();
        this.narNumber = (String)in.readObject();
        this.notes = (String)in.readObject();
        this.paidThru = (Date)in.readObject();
        this.postEmail = (String)in.readObject();
        this.tripoliNumber = (String)in.readObject();
        this.username = (String)in.readObject();
        this.workPhone = (String)in.readObject();
    }

}
