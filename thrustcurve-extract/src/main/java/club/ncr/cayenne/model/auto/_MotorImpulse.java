package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.model.Motor;
import club.ncr.cayenne.model.MotorCaseImpulse;
import club.ncr.cayenne.model.MotorName;

/**
 * Class _MotorImpulse was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MotorImpulse extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Integer> CLASSIFICATION = Property.create("classification", Integer.class);
    public static final Property<String> IMPULSE = Property.create("impulse", String.class);
    public static final Property<List<MotorCaseImpulse>> MOTOR_CASE_IMPULSES = Property.create("motorCaseImpulses", List.class);
    public static final Property<List<MotorName>> MOTOR_NAMES = Property.create("motorNames", List.class);
    public static final Property<List<Motor>> MOTORS = Property.create("motors", List.class);

    protected Integer classification;
    protected String impulse;

    protected Object motorCaseImpulses;
    protected Object motorNames;
    protected Object motors;

    public void setClassification(int classification) {
        beforePropertyWrite("classification", this.classification, classification);
        this.classification = classification;
    }

    public int getClassification() {
        beforePropertyRead("classification");
        if(this.classification == null) {
            return 0;
        }
        return this.classification;
    }

    public void setImpulse(String impulse) {
        beforePropertyWrite("impulse", this.impulse, impulse);
        this.impulse = impulse;
    }

    public String getImpulse() {
        beforePropertyRead("impulse");
        return this.impulse;
    }

    public void addToMotorCaseImpulses(MotorCaseImpulse obj) {
        addToManyTarget("motorCaseImpulses", obj, true);
    }

    public void removeFromMotorCaseImpulses(MotorCaseImpulse obj) {
        removeToManyTarget("motorCaseImpulses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MotorCaseImpulse> getMotorCaseImpulses() {
        return (List<MotorCaseImpulse>)readProperty("motorCaseImpulses");
    }

    public void addToMotorNames(MotorName obj) {
        addToManyTarget("motorNames", obj, true);
    }

    public void removeFromMotorNames(MotorName obj) {
        removeToManyTarget("motorNames", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MotorName> getMotorNames() {
        return (List<MotorName>)readProperty("motorNames");
    }

    public void addToMotors(Motor obj) {
        addToManyTarget("motors", obj, true);
    }

    public void removeFromMotors(Motor obj) {
        removeToManyTarget("motors", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Motor> getMotors() {
        return (List<Motor>)readProperty("motors");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "classification":
                return this.classification;
            case "impulse":
                return this.impulse;
            case "motorCaseImpulses":
                return this.motorCaseImpulses;
            case "motorNames":
                return this.motorNames;
            case "motors":
                return this.motors;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "classification":
                this.classification = (Integer)val;
                break;
            case "impulse":
                this.impulse = (String)val;
                break;
            case "motorCaseImpulses":
                this.motorCaseImpulses = val;
                break;
            case "motorNames":
                this.motorNames = val;
                break;
            case "motors":
                this.motors = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.classification);
        out.writeObject(this.impulse);
        out.writeObject(this.motorCaseImpulses);
        out.writeObject(this.motorNames);
        out.writeObject(this.motors);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.classification = (Integer)in.readObject();
        this.impulse = (String)in.readObject();
        this.motorCaseImpulses = in.readObject();
        this.motorNames = in.readObject();
        this.motors = in.readObject();
    }

}
