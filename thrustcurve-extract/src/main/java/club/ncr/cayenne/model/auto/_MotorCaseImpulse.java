package club.ncr.cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.model.MotorCase;
import club.ncr.cayenne.model.MotorImpulse;

/**
 * Class _MotorCaseImpulse was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MotorCaseImpulse extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<MotorCase> MOTOR_CASE = Property.create("motorCase", MotorCase.class);
    public static final Property<MotorImpulse> MOTOR_IMPULSE = Property.create("motorImpulse", MotorImpulse.class);


    protected Object motorCase;
    protected Object motorImpulse;

    public void setMotorCase(MotorCase motorCase) {
        setToOneTarget("motorCase", motorCase, true);
    }

    public MotorCase getMotorCase() {
        return (MotorCase)readProperty("motorCase");
    }

    public void setMotorImpulse(MotorImpulse motorImpulse) {
        setToOneTarget("motorImpulse", motorImpulse, true);
    }

    public MotorImpulse getMotorImpulse() {
        return (MotorImpulse)readProperty("motorImpulse");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "motorCase":
                return this.motorCase;
            case "motorImpulse":
                return this.motorImpulse;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "motorCase":
                this.motorCase = val;
                break;
            case "motorImpulse":
                this.motorImpulse = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.motorCase);
        out.writeObject(this.motorImpulse);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.motorCase = in.readObject();
        this.motorImpulse = in.readObject();
    }

}
