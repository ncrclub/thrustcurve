package club.ncr.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.MotorData;

/**
 * Class _MotorDataFormat was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MotorDataFormat extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> FILE_EXTENSION = Property.create("fileExtension", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<MotorData>> MOTOR_DATA = Property.create("motorData", List.class);

    protected String fileExtension;
    protected String name;

    protected Object motorData;

    public void setFileExtension(String fileExtension) {
        beforePropertyWrite("fileExtension", this.fileExtension, fileExtension);
        this.fileExtension = fileExtension;
    }

    public String getFileExtension() {
        beforePropertyRead("fileExtension");
        return this.fileExtension;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToMotorData(MotorData obj) {
        addToManyTarget("motorData", obj, true);
    }

    public void removeFromMotorData(MotorData obj) {
        removeToManyTarget("motorData", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MotorData> getMotorData() {
        return (List<MotorData>)readProperty("motorData");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "fileExtension":
                return this.fileExtension;
            case "name":
                return this.name;
            case "motorData":
                return this.motorData;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "fileExtension":
                this.fileExtension = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "motorData":
                this.motorData = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.fileExtension);
        out.writeObject(this.name);
        out.writeObject(this.motorData);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.fileExtension = (String)in.readObject();
        this.name = (String)in.readObject();
        this.motorData = in.readObject();
    }

}
