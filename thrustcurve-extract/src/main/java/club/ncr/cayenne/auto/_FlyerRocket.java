package club.ncr.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.FlightLog;

/**
 * Class _FlyerRocket was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _FlyerRocket extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> FLYER_USER_ID = Property.create("flyerUserId", Integer.class);
    public static final Property<Date> MAIDEN_FLIGHT_DATE = Property.create("maidenFlightDate", Date.class);
    public static final Property<String> ROCKET_NAME = Property.create("rocketName", String.class);
    public static final Property<Float> ROCKET_WEIGHT = Property.create("rocketWeight", Float.class);
    public static final Property<String> USER_NOTES = Property.create("userNotes", String.class);
    public static final Property<String> WEIGHT_UNITS = Property.create("weightUnits", String.class);
    public static final Property<List<FlightLog>> FLIGHT_LOGS = Property.create("flightLogs", List.class);

    protected Integer flyerUserId;
    protected Date maidenFlightDate;
    protected String rocketName;
    protected Float rocketWeight;
    protected String userNotes;
    protected String weightUnits;

    protected Object flightLogs;

    public void setFlyerUserId(Integer flyerUserId) {
        beforePropertyWrite("flyerUserId", this.flyerUserId, flyerUserId);
        this.flyerUserId = flyerUserId;
    }

    public Integer getFlyerUserId() {
        beforePropertyRead("flyerUserId");
        return this.flyerUserId;
    }

    public void setMaidenFlightDate(Date maidenFlightDate) {
        beforePropertyWrite("maidenFlightDate", this.maidenFlightDate, maidenFlightDate);
        this.maidenFlightDate = maidenFlightDate;
    }

    public Date getMaidenFlightDate() {
        beforePropertyRead("maidenFlightDate");
        return this.maidenFlightDate;
    }

    public void setRocketName(String rocketName) {
        beforePropertyWrite("rocketName", this.rocketName, rocketName);
        this.rocketName = rocketName;
    }

    public String getRocketName() {
        beforePropertyRead("rocketName");
        return this.rocketName;
    }

    public void setRocketWeight(Float rocketWeight) {
        beforePropertyWrite("rocketWeight", this.rocketWeight, rocketWeight);
        this.rocketWeight = rocketWeight;
    }

    public Float getRocketWeight() {
        beforePropertyRead("rocketWeight");
        return this.rocketWeight;
    }

    public void setUserNotes(String userNotes) {
        beforePropertyWrite("userNotes", this.userNotes, userNotes);
        this.userNotes = userNotes;
    }

    public String getUserNotes() {
        beforePropertyRead("userNotes");
        return this.userNotes;
    }

    public void setWeightUnits(String weightUnits) {
        beforePropertyWrite("weightUnits", this.weightUnits, weightUnits);
        this.weightUnits = weightUnits;
    }

    public String getWeightUnits() {
        beforePropertyRead("weightUnits");
        return this.weightUnits;
    }

    public void addToFlightLogs(FlightLog obj) {
        addToManyTarget("flightLogs", obj, true);
    }

    public void removeFromFlightLogs(FlightLog obj) {
        removeToManyTarget("flightLogs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<FlightLog> getFlightLogs() {
        return (List<FlightLog>)readProperty("flightLogs");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "flyerUserId":
                return this.flyerUserId;
            case "maidenFlightDate":
                return this.maidenFlightDate;
            case "rocketName":
                return this.rocketName;
            case "rocketWeight":
                return this.rocketWeight;
            case "userNotes":
                return this.userNotes;
            case "weightUnits":
                return this.weightUnits;
            case "flightLogs":
                return this.flightLogs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "flyerUserId":
                this.flyerUserId = (Integer)val;
                break;
            case "maidenFlightDate":
                this.maidenFlightDate = (Date)val;
                break;
            case "rocketName":
                this.rocketName = (String)val;
                break;
            case "rocketWeight":
                this.rocketWeight = (Float)val;
                break;
            case "userNotes":
                this.userNotes = (String)val;
                break;
            case "weightUnits":
                this.weightUnits = (String)val;
                break;
            case "flightLogs":
                this.flightLogs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.flyerUserId);
        out.writeObject(this.maidenFlightDate);
        out.writeObject(this.rocketName);
        out.writeObject(this.rocketWeight);
        out.writeObject(this.userNotes);
        out.writeObject(this.weightUnits);
        out.writeObject(this.flightLogs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.flyerUserId = (Integer)in.readObject();
        this.maidenFlightDate = (Date)in.readObject();
        this.rocketName = (String)in.readObject();
        this.rocketWeight = (Float)in.readObject();
        this.userNotes = (String)in.readObject();
        this.weightUnits = (String)in.readObject();
        this.flightLogs = in.readObject();
    }

}
