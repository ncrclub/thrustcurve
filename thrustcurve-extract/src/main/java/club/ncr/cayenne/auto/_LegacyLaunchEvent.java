package club.ncr.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _LegacyLaunchEvent was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LegacyLaunchEvent extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> CLUB_LAUNCH = Property.create("clubLaunch", String.class);
    public static final Property<Date> CREATED_DATE = Property.create("createdDate", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Date> LAUNCH_DATE = Property.create("launchDate", Date.class);
    public static final Property<String> LOCATION = Property.create("location", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> WEATHER = Property.create("weather", String.class);

    protected String clubLaunch;
    protected Date createdDate;
    protected String description;
    protected Date launchDate;
    protected String location;
    protected String name;
    protected String weather;


    public void setClubLaunch(String clubLaunch) {
        beforePropertyWrite("clubLaunch", this.clubLaunch, clubLaunch);
        this.clubLaunch = clubLaunch;
    }

    public String getClubLaunch() {
        beforePropertyRead("clubLaunch");
        return this.clubLaunch;
    }

    public void setCreatedDate(Date createdDate) {
        beforePropertyWrite("createdDate", this.createdDate, createdDate);
        this.createdDate = createdDate;
    }

    public Date getCreatedDate() {
        beforePropertyRead("createdDate");
        return this.createdDate;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setLaunchDate(Date launchDate) {
        beforePropertyWrite("launchDate", this.launchDate, launchDate);
        this.launchDate = launchDate;
    }

    public Date getLaunchDate() {
        beforePropertyRead("launchDate");
        return this.launchDate;
    }

    public void setLocation(String location) {
        beforePropertyWrite("location", this.location, location);
        this.location = location;
    }

    public String getLocation() {
        beforePropertyRead("location");
        return this.location;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setWeather(String weather) {
        beforePropertyWrite("weather", this.weather, weather);
        this.weather = weather;
    }

    public String getWeather() {
        beforePropertyRead("weather");
        return this.weather;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "clubLaunch":
                return this.clubLaunch;
            case "createdDate":
                return this.createdDate;
            case "description":
                return this.description;
            case "launchDate":
                return this.launchDate;
            case "location":
                return this.location;
            case "name":
                return this.name;
            case "weather":
                return this.weather;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "clubLaunch":
                this.clubLaunch = (String)val;
                break;
            case "createdDate":
                this.createdDate = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "launchDate":
                this.launchDate = (Date)val;
                break;
            case "location":
                this.location = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "weather":
                this.weather = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.clubLaunch);
        out.writeObject(this.createdDate);
        out.writeObject(this.description);
        out.writeObject(this.launchDate);
        out.writeObject(this.location);
        out.writeObject(this.name);
        out.writeObject(this.weather);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.clubLaunch = (String)in.readObject();
        this.createdDate = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.launchDate = (Date)in.readObject();
        this.location = (String)in.readObject();
        this.name = (String)in.readObject();
        this.weather = (String)in.readObject();
    }

}
