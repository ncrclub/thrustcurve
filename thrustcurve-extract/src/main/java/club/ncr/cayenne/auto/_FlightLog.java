package club.ncr.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import club.ncr.cayenne.FlightEvent;
import club.ncr.cayenne.FlyerRecord;
import club.ncr.cayenne.FlyerRocket;

/**
 * Class _FlightLog was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _FlightLog extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> ALTITUDE = Property.create("altitude", Integer.class);
    public static final Property<Date> FLIGHT_DATE = Property.create("flightDate", Date.class);
    public static final Property<String> FLIGHT_NOTES = Property.create("flightNotes", String.class);
    public static final Property<Integer> FLYER_ID = Property.create("flyerId", Integer.class);
    public static final Property<Integer> FLYER_ROCKET_ID = Property.create("flyerRocketId", Integer.class);
    public static final Property<Integer> LAUNCH_CONTROL_OFFICER_ID = Property.create("launchControlOfficerId", Integer.class);
    public static final Property<Integer> LAUNCH_EVENT_ID = Property.create("launchEventId", Integer.class);
    public static final Property<Integer> MOTOR_ID = Property.create("motorId", Integer.class);
    public static final Property<Integer> MOTOR_MFG_ID = Property.create("motorMfgId", Integer.class);
    public static final Property<Integer> MOTOR_NAME_ID = Property.create("motorNameId", Integer.class);
    public static final Property<Double> MOTOR_WEIGHT = Property.create("motorWeight", Double.class);
    public static final Property<List<FlyerRecord>> FLYER = Property.create("flyer", List.class);
    public static final Property<FlightEvent> LAUNCH_EVENT = Property.create("launchEvent", FlightEvent.class);
    public static final Property<FlyerRocket> ROCKET = Property.create("rocket", FlyerRocket.class);

    protected Integer altitude;
    protected Date flightDate;
    protected String flightNotes;
    protected Integer flyerId;
    protected Integer flyerRocketId;
    protected Integer launchControlOfficerId;
    protected Integer launchEventId;
    protected Integer motorId;
    protected Integer motorMfgId;
    protected Integer motorNameId;
    protected Double motorWeight;

    protected Object flyer;
    protected Object launchEvent;
    protected Object rocket;

    public void setAltitude(Integer altitude) {
        beforePropertyWrite("altitude", this.altitude, altitude);
        this.altitude = altitude;
    }

    public Integer getAltitude() {
        beforePropertyRead("altitude");
        return this.altitude;
    }

    public void setFlightDate(Date flightDate) {
        beforePropertyWrite("flightDate", this.flightDate, flightDate);
        this.flightDate = flightDate;
    }

    public Date getFlightDate() {
        beforePropertyRead("flightDate");
        return this.flightDate;
    }

    public void setFlightNotes(String flightNotes) {
        beforePropertyWrite("flightNotes", this.flightNotes, flightNotes);
        this.flightNotes = flightNotes;
    }

    public String getFlightNotes() {
        beforePropertyRead("flightNotes");
        return this.flightNotes;
    }

    public void setFlyerId(Integer flyerId) {
        beforePropertyWrite("flyerId", this.flyerId, flyerId);
        this.flyerId = flyerId;
    }

    public Integer getFlyerId() {
        beforePropertyRead("flyerId");
        return this.flyerId;
    }

    public void setFlyerRocketId(Integer flyerRocketId) {
        beforePropertyWrite("flyerRocketId", this.flyerRocketId, flyerRocketId);
        this.flyerRocketId = flyerRocketId;
    }

    public Integer getFlyerRocketId() {
        beforePropertyRead("flyerRocketId");
        return this.flyerRocketId;
    }

    public void setLaunchControlOfficerId(Integer launchControlOfficerId) {
        beforePropertyWrite("launchControlOfficerId", this.launchControlOfficerId, launchControlOfficerId);
        this.launchControlOfficerId = launchControlOfficerId;
    }

    public Integer getLaunchControlOfficerId() {
        beforePropertyRead("launchControlOfficerId");
        return this.launchControlOfficerId;
    }

    public void setLaunchEventId(Integer launchEventId) {
        beforePropertyWrite("launchEventId", this.launchEventId, launchEventId);
        this.launchEventId = launchEventId;
    }

    public Integer getLaunchEventId() {
        beforePropertyRead("launchEventId");
        return this.launchEventId;
    }

    public void setMotorId(Integer motorId) {
        beforePropertyWrite("motorId", this.motorId, motorId);
        this.motorId = motorId;
    }

    public Integer getMotorId() {
        beforePropertyRead("motorId");
        return this.motorId;
    }

    public void setMotorMfgId(Integer motorMfgId) {
        beforePropertyWrite("motorMfgId", this.motorMfgId, motorMfgId);
        this.motorMfgId = motorMfgId;
    }

    public Integer getMotorMfgId() {
        beforePropertyRead("motorMfgId");
        return this.motorMfgId;
    }

    public void setMotorNameId(Integer motorNameId) {
        beforePropertyWrite("motorNameId", this.motorNameId, motorNameId);
        this.motorNameId = motorNameId;
    }

    public Integer getMotorNameId() {
        beforePropertyRead("motorNameId");
        return this.motorNameId;
    }

    public void setMotorWeight(Double motorWeight) {
        beforePropertyWrite("motorWeight", this.motorWeight, motorWeight);
        this.motorWeight = motorWeight;
    }

    public Double getMotorWeight() {
        beforePropertyRead("motorWeight");
        return this.motorWeight;
    }

    public void addToFlyer(FlyerRecord obj) {
        addToManyTarget("flyer", obj, true);
    }

    public void removeFromFlyer(FlyerRecord obj) {
        removeToManyTarget("flyer", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<FlyerRecord> getFlyer() {
        return (List<FlyerRecord>)readProperty("flyer");
    }

    public void setLaunchEvent(FlightEvent launchEvent) {
        setToOneTarget("launchEvent", launchEvent, true);
    }

    public FlightEvent getLaunchEvent() {
        return (FlightEvent)readProperty("launchEvent");
    }

    public void setRocket(FlyerRocket rocket) {
        setToOneTarget("rocket", rocket, true);
    }

    public FlyerRocket getRocket() {
        return (FlyerRocket)readProperty("rocket");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "altitude":
                return this.altitude;
            case "flightDate":
                return this.flightDate;
            case "flightNotes":
                return this.flightNotes;
            case "flyerId":
                return this.flyerId;
            case "flyerRocketId":
                return this.flyerRocketId;
            case "launchControlOfficerId":
                return this.launchControlOfficerId;
            case "launchEventId":
                return this.launchEventId;
            case "motorId":
                return this.motorId;
            case "motorMfgId":
                return this.motorMfgId;
            case "motorNameId":
                return this.motorNameId;
            case "motorWeight":
                return this.motorWeight;
            case "flyer":
                return this.flyer;
            case "launchEvent":
                return this.launchEvent;
            case "rocket":
                return this.rocket;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "altitude":
                this.altitude = (Integer)val;
                break;
            case "flightDate":
                this.flightDate = (Date)val;
                break;
            case "flightNotes":
                this.flightNotes = (String)val;
                break;
            case "flyerId":
                this.flyerId = (Integer)val;
                break;
            case "flyerRocketId":
                this.flyerRocketId = (Integer)val;
                break;
            case "launchControlOfficerId":
                this.launchControlOfficerId = (Integer)val;
                break;
            case "launchEventId":
                this.launchEventId = (Integer)val;
                break;
            case "motorId":
                this.motorId = (Integer)val;
                break;
            case "motorMfgId":
                this.motorMfgId = (Integer)val;
                break;
            case "motorNameId":
                this.motorNameId = (Integer)val;
                break;
            case "motorWeight":
                this.motorWeight = (Double)val;
                break;
            case "flyer":
                this.flyer = val;
                break;
            case "launchEvent":
                this.launchEvent = val;
                break;
            case "rocket":
                this.rocket = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.altitude);
        out.writeObject(this.flightDate);
        out.writeObject(this.flightNotes);
        out.writeObject(this.flyerId);
        out.writeObject(this.flyerRocketId);
        out.writeObject(this.launchControlOfficerId);
        out.writeObject(this.launchEventId);
        out.writeObject(this.motorId);
        out.writeObject(this.motorMfgId);
        out.writeObject(this.motorNameId);
        out.writeObject(this.motorWeight);
        out.writeObject(this.flyer);
        out.writeObject(this.launchEvent);
        out.writeObject(this.rocket);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.altitude = (Integer)in.readObject();
        this.flightDate = (Date)in.readObject();
        this.flightNotes = (String)in.readObject();
        this.flyerId = (Integer)in.readObject();
        this.flyerRocketId = (Integer)in.readObject();
        this.launchControlOfficerId = (Integer)in.readObject();
        this.launchEventId = (Integer)in.readObject();
        this.motorId = (Integer)in.readObject();
        this.motorMfgId = (Integer)in.readObject();
        this.motorNameId = (Integer)in.readObject();
        this.motorWeight = (Double)in.readObject();
        this.flyer = in.readObject();
        this.launchEvent = in.readObject();
        this.rocket = in.readObject();
    }

}
